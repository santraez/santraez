---
import type { GetStaticPaths } from 'astro'
import { Icon } from 'astro-icon/components'

import MainLayout from '@/layouts/main-layout.astro'
import PokemonCard from '@/components/pokemon-card.astro'
import type { Pokemon } from '@/interfaces/pokemon'

export const getStaticPaths = (async () => {
  const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=200')

  const data = (await response.json()) as Pokemon
  
  return data.results.map(pokemon => ({
    params: { name: pokemon.name },
    props: {
      name: pokemon.name,
      url: pokemon.url
    }
  }))
}) satisfies GetStaticPaths

const { name } = Astro.params
const { url } = Astro.props

const id = url.split('/').at(-2)
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`
---

<MainLayout
  title={`Pokemon - #${id} ${name}`}
  image={imageSrc}
  description={`Details about the PokÃ©mon #${id} ${name}.`}
>
  <section class='flex flex-col justify-center items-center mx-10 mt-10'>
    <div>
      <button onclick='history.back()'>
        Back to List
      </button>

      <h1 class='text-5xl capitalize'>#{id} {name}</h1>
    </div>

    <button
      id='favorite-button'
      class='mt-5'
      data-id={id}
      data-name={name}
    >
      <Icon class='hidden' name='heart' size={50} data-heart />
      <Icon name='heart-outline' size={50} data-heart-outline />
    </button>

    <PokemonCard name={name} url={url} isBig/>
    
    <audio controls class='mt-5'>
      <source src={audioSrc} type='audio/ogg' />
    </audio>
  </section>
</MainLayout>

<script>
  import type { FavoritePokemon } from '@/interfaces/favorite-pokemon'

  document.addEventListener('astro:page-load', () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(localStorage.getItem('favorites') ?? '[]')

    console.log(favoritePokemons)

    const favoriteButton = document.getElementById('favorite-button') as HTMLButtonElement

    if (!favoriteButton) return

    const id = favoriteButton.dataset.id
    const name = favoriteButton.dataset.name

    if (!id || !name) return

    const heartIcon = favoriteButton.querySelector('[data-heart]') as HTMLElement
    const heartOutlineIcon = favoriteButton.querySelector('[data-heart-outline]') as HTMLElement

    const isFavorite = favoritePokemons.some(pokemon => pokemon.name === name)

    if (isFavorite) {
      heartIcon.classList.toggle('hidden')
      heartOutlineIcon.classList.toggle('hidden')
    }

    favoriteButton.addEventListener('click', () => {
      heartIcon.classList.toggle('hidden')
      heartOutlineIcon.classList.toggle('hidden')

      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter(pokemon => pokemon.id !== +id)
      } else {
        favoritePokemons.push({ id: +id, name })
      }

      localStorage.setItem('favorites', JSON.stringify(favoritePokemons))
    })
  })
</script>
